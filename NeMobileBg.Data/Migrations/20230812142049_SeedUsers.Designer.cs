// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeMobileBg.Data;

#nullable disable

namespace NeMobileBg.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230812142049_SeedUsers")]
    partial class SeedUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NeMobileBg.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "40c03149-66ea-40bb-aa7e-7a21c50ad877",
                            AccessFailedCount = 0,
                            City = "Sample City",
                            ConcurrencyStamp = "f9da97a0-bb9a-4f31-8509-893e710288da",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELx1ioUka3gc6DVVn/VdUwpfdoNhIe7z6+mA1NH+VYQphJ2kQ1IDSYhHm6kFBO4Wmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4080591-a521-4e82-92fa-2a0324f654c2",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "3035f543-8ce5-457d-8073-c086473cf18a",
                            AccessFailedCount = 0,
                            City = "Sample City ",
                            ConcurrencyStamp = "af788763-726f-40c4-9e58-18dc94ff599e",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFxuAR21yTpITsZCfv6YxWVPCAIiRQElxm2jKgkmQdRpY0+4+e3nnHvoEKpvSnNY3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22a16aea-725e-435c-8918-f055f22156c5",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = "5856091b-d323-445d-a07b-5c28db656393",
                            AccessFailedCount = 0,
                            City = "Sample City ",
                            ConcurrencyStamp = "6eb4b2c3-1d16-411d-8da7-a63e3c141ccb",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIvMqXt/x7/BzG+Sv9ar6MvplSmfQJxnLdh6MhSXXhyHm/obTe6AR9XglVUt0whF+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7052e02f-d516-4c59-adcd-cf56bd4dee73",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = "cac28230-993c-449b-b723-ae38634028ab",
                            AccessFailedCount = 0,
                            City = "Sample City ",
                            ConcurrencyStamp = "d3bb8dff-853e-4ab8-8839-f34d3cff15cd",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOuFX4mpDXHLAB5N8l1mBWObEJ3ZBqF6PG2IySEjn3gosmVzW8ZldPaEJYld8C5aqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38fa900d-7196-441c-9ff4-e8f5b9e7f462",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = "a3be7477-f92b-43b9-bf70-05c7a3c795f0",
                            AccessFailedCount = 0,
                            City = "Sample City ",
                            ConcurrencyStamp = "5a739852-ac1f-45fe-af01-756317aa1bda",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOJ3MYclJoR1DQkiWellijORnbChJUfxwHTTPrw3dWKm/NfkHFkOQuRWN1OiNpCTBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32cfb4ca-94fc-4f1d-8276-4341a48bcc72",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = "296290bd-402b-4dc7-922f-3586f8d0c882",
                            AccessFailedCount = 0,
                            City = "Sample City ",
                            ConcurrencyStamp = "920dd963-02a1-4396-8dba-d73bd80405ee",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEG7TEcCahleb4S4XxyNwrkQz2MzumIs8lVAk/8XQpOzSgr/WTlRcDxUdwS0yDo0sMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3df6c15-8727-4864-84e5-ca02afda9b9c",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = "f5e77190-e257-4c89-b43e-4a136f02cb34",
                            AccessFailedCount = 0,
                            City = "Sample City ",
                            ConcurrencyStamp = "45b108d0-51e2-4b23-a79b-02475d1b0ef5",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDMltgFG7oF90P9V7KxUecG917nj4zEyxruxJSdduxPMO9d/Bg5EOqmn/Yw4fuQhAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a48a5d0a-9871-4889-8504-0bb4c063d11c",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = "824856e7-f56b-4f18-807f-d75e04c81ed0",
                            AccessFailedCount = 0,
                            City = "Sample City ",
                            ConcurrencyStamp = "1323796e-3195-48f6-93fe-17bd3b5a9b6b",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDewdZ0OLmcydzWtPqUnfecyO9Cz4qx0WBbYPdquTlc9LFNmKp0swRH4ZtFlZ/mSNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0543b14e-9db3-4917-a487-3b909600fbfb",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = "4a73c6d5-f1be-478f-af3f-e81d3ab8fbe5",
                            AccessFailedCount = 0,
                            City = "Sample City ",
                            ConcurrencyStamp = "359b9eaf-cd52-4dc8-b6c7-e255ffb4505b",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELWB3rpd3o+cGhUkzSPiH/pjO6ZBU/Lw8HRhi2lKbJWpmbeLTEW0Us02NhFIlID9lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39612fd1-2a92-4d34-bc39-f7a866c3228f",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = "e4154c9a-5aae-4ab5-8f22-f224880a3ba8",
                            AccessFailedCount = 0,
                            City = "Sample City ",
                            ConcurrencyStamp = "67a5f7ba-e4e7-413a-9513-94c11ba39b3a",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMpNN/lfQSX+Le5NODE6Ec5vHgNlR9bhcLUvl3STIHstzqXr6HRl8m35p5kOIdF3bQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1b052ec-25f8-47f3-bcfb-84afddcbd0e1",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = "037f69eb-1390-435f-a085-e738fb60e93e",
                            AccessFailedCount = 0,
                            City = "Sample City ",
                            ConcurrencyStamp = "86f4e27b-cef9-402c-b906-2760cce77e1c",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJ89u+CSXDAIUL/33Wx3ke1ybl+IWsBt9sUydoEqHu9Z8McqtcW6AIVOPP2szVCong==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65a0f194-f98e-49e4-883c-54c53fa62a17",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        });
                });

            modelBuilder.Entity("NeMobileBg.Data.Models.Car", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Convertible")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doors")
                        .HasColumnType("int");

                    b.Property<string>("EuroStandard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gearbox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(9)
                        .HasColumnType("decimal(9,0)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("NeMobileBg.Data.Models.Motorcycle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EuroStandard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gearbox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(9)
                        .HasColumnType("decimal(9,0)");

                    b.Property<string>("RequiredLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("NeMobileBg.Data.Models.Truck", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Axles")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EuroStandard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gearbox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(9)
                        .HasColumnType("decimal(9,0)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NeMobileBg.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NeMobileBg.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeMobileBg.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NeMobileBg.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NeMobileBg.Data.Models.Car", b =>
                {
                    b.HasOne("NeMobileBg.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Cars")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NeMobileBg.Data.Models.Motorcycle", b =>
                {
                    b.HasOne("NeMobileBg.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Motorcycles")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NeMobileBg.Data.Models.Truck", b =>
                {
                    b.HasOne("NeMobileBg.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Trucks")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NeMobileBg.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Motorcycles");

                    b.Navigation("Trucks");
                });
#pragma warning restore 612, 618
        }
    }
}
